#!/usr/bin/env ruby

require 'rubygems'
require 'jaspion/kilza'
require 'pastel'
require 'tty'
require 'tty-prompt'
require 'tty-spinner'
require 'net/http'
require 'uri'

def read_url(url)
  Net::HTTP.get(URI.parse(url))
end

module TTY
  class Prompt
    class List
      def enum(value)
        @enum = value
      end
    end
  end
end

class KilzaApplication

  OBJC = 1
  JAVA = 2
  SWIFT = 3

  def initialize
    @pastel = Pastel.new
    @prompt = TTY::Prompt.new
    @spinner = TTY::Spinner.new

    @done = false
  end

  def get_lang
    action = @prompt.select(@pastel.bold('Target programming language?')) do |menu|
      menu.default 1
      menu.enum '.'

      menu.choice 'Objective-C', OBJC
      menu.choice 'Swift', SWIFT
      menu.choice 'Java', JAVA
    end
    action
  end

  def get_json
    action = @prompt.select(@pastel.bold('Where is your JSON string content?')) do |menu|
      menu.default 1
      menu.enum '.'

      menu.choice 'It\'s online. I have an URL.', 1
      menu.choice 'It\'s offline. I have the file path.', 2
    end

    json_string = ''
    if (action == 1)
      url = @prompt.ask(@pastel.bold('Please, what is the URL? ')) do |q|
        q.required true
      end
      @prompt.say(@pastel.bold('Ok. I\'ll try to get the content right now.'))
      json_string = read_url(url)
    else
      file_path = File.expand_path(@prompt.ask(@pastel.bold('Please, what is the file path? '))) do |q|
        q.required true
      end
      json_string = File.read(file_path.chomp)
    end
    json_string
  end

  def generate(lang, json_string, class_basename, target_path, class_package = '')
    if (lang == OBJC)
      objc = Jaspion::Kilza::Objc.new(json_string)
      objc.classes(class_basename).each { |c|
        c.sources.each{ |s|
          File.write(File.join(target_path, s.file_name), s.source)
        }
      }
    elsif (lang == JAVA)
      java = Jaspion::Kilza::Java.new(json_string)
      java.classes(class_basename).each { |c|
        c.package = class_package
        c.sources.each{ |s|
          File.write(File.join(target_path, s.file_name), s.source)
        }
      }
    elsif (lang == SWIFT)
      swift = Jaspion::Kilza::Swift.new(json_string)
      swift.classes(class_basename).each { |c|
        c.sources.each{ |s|
          File.write(File.join(target_path, s.file_name), s.source)
        }
      }
    end
  end

  def get_target_path
    target_path = @prompt.ask(@pastel.bold('Master, where would you like to save? ')).chomp
    File.expand_path(target_path)
  end

  def get_basename
    @prompt.ask(@pastel.bold('Master, which name would like to call the first class? ')).chomp
  end

  def get_package
    @prompt.ask(@pastel.bold('What is the target Java package? ')).chomp
  end

  def run
    @prompt.say(@pastel.bold('Kilza - v' + Jaspion::Kilza::VERSION))
    while (not @done)
      action = @prompt.select(@pastel.bold('Master, what can I do for you?')) do |menu|
        menu.default 1
        menu.enum '.'

        menu.choice 'I want some JSON objects.', 1
        menu.choice 'Nothing.', 2
      end
      if action == 1
        json_string = get_json
        target_path = get_target_path
        class_basename = get_basename
        lang = get_lang

        class_package = get_package if (lang == JAVA)

        @prompt.say("\n")
        @prompt.say(@pastel.bold('Target: ') + target_path)
        @prompt.say(@pastel.bold('Base class name: ') + class_basename)
        @prompt.say(@pastel.bold('Target language: ') + (lang == OBJC ? 'Objective-C' : (lang == SWIFT ? 'Swift' : 'Java')))
        unless class_package.nil?
          @prompt.say(@pastel.bold('Target package: ') + class_package)
        end
        ok = @prompt.yes?(@pastel.bold('Is that correct? '))
        if ok.nil? or ok
          generate(lang, json_string, class_basename, target_path, class_package)

          @prompt.say(@pastel.bold('Kikera!'))
        end
      else
        @done = true
      end
    end
  end
end

KilzaApplication.new.run
