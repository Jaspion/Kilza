//
//  BaseArray.m
//
//  Created on <%= Time.now.strftime("%Y-%m-%d") %>
//  Copyright (c) <%= Time.now.strftime("%Y") %>. All rights reserved.
//  Generated by Kilza https://github.com/Jaspion/Kilza
//

#import "BaseArray.h"

// Original names
NSString *const kBaseArrayBasearrayobject = @"BaseArrayObject";

@interface BaseArray ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end

@implementation BaseArray

+ (BaseArray *)modelWithDictionary:(NSDictionary *)dict {
    BaseArray *instance = [[BaseArray alloc] initWithDictionary:dict];
    return instance;
}

+ (BaseArray *)modelWithString:(NSString *)json {
    BaseArray *instance = [[BaseArray alloc] initWithString:json];
    return instance;
}

- (instancetype)initWithString:(NSString *)json {
    self = [super init];

    if (![[json stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] hasPrefix:@"{"])
        json = [NSString stringWithFormat:@"{ \"%@\" : %@ }", kBaseArrayBasearrayobject, json];

    NSError *jsonError = nil;
    NSData *objectData = [json dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:objectData
                                                         options:NSJSONReadingMutableContainers
                                                           error:&jsonError];
    if (!jsonError)
        self = [self initWithDictionary:dict];

    return self;
}

- (instancetype)initWithDictionary:(NSDictionary *)dict {
    self = [super init];

    if (self && [dict isKindOfClass:[NSDictionary class]]) {
        self.basearrayobject = [self objectOrNilForKey:kBaseArrayBasearrayobject fromDictionary:dict];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation {
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];

    [mutableDict setValue:self.basearrayobject forKey:kBaseArrayBasearrayobject];

    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description {
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method
- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict {
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}

#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder {
    self = [super init];

    self.basearrayobject = [aDecoder decodeObjectForKey:kBaseArrayBasearrayobject];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder {
    [aCoder encodeObject:_basearrayobject forKey:kBaseArrayBasearrayobject];
}

- (id)copyWithZone:(NSZone *)zone {
    BaseArray *copy = [[BaseArray alloc] init];
    if (copy) {
        copy.basearrayobject = [self.basearrayobject copyWithZone:zone];
    }

    return copy;
}

@end
