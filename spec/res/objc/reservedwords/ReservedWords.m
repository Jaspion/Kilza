//
//  ReservedWords.m
//
//  Created on <%= Time.now.strftime("%Y-%m-%d") %>
//  Copyright (c) <%= Time.now.strftime("%Y") %>. All rights reserved.
//  Generated by Kilza https://github.com/Jaspion/Kilza
//

#import "ReservedWords.h"
#import "ReturnClass.h"

// Original names
NSString *const kReservedWords_if = @"if";
NSString *const kReservedWords_return = @"return";

@interface ReservedWords ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end

@implementation ReservedWords

+ (ReservedWords *)modelWithDictionary:(NSDictionary *)dict {
    ReservedWords *instance = [[ReservedWords alloc] initWithDictionary:dict];
    return instance;
}

+ (ReservedWords *)modelWithString:(NSString *)json {
    ReservedWords *instance = [[ReservedWords alloc] initWithString:json];
    return instance;
}

- (instancetype)initWithString:(NSString *)json {
    self = [super init];
    NSError *jsonError = nil;
    NSData *objectData = [json dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:objectData
                                                         options:NSJSONReadingMutableContainers
                                                           error:&jsonError];
    if (!jsonError)
        self = [self initWithDictionary:dict];

    return self;
}

- (instancetype)initWithDictionary:(NSDictionary *)dict {
    self = [super init];

    if (self && [dict isKindOfClass:[NSDictionary class]]) {
        self._if = [self objectOrNilForKey:kReservedWords_if fromDictionary:dict];
        NSObject *objReturnClass = [self objectOrNilForKey:kReservedWords_return fromDictionary:dict];
        if (objReturnClass) {
            self._return = [ReturnClass modelWithDictionary:(NSDictionary *)objReturnClass];
        }
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation {
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];

    [mutableDict setValue:self._if forKey:kReservedWords_if];
    if ([self._return respondsToSelector:@selector(dictionaryRepresentation)]) {
        [mutableDict setValue:[self._return performSelector:@selector(dictionaryRepresentation)] forKey:kReservedWords_return];
    } else {
        [mutableDict setValue:self._return forKey:kReservedWords_return];
    }

    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description {
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method
- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict {
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}

#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder {
    self = [super init];

    self._if = [aDecoder decodeObjectForKey:kReservedWords_if];
    self._return = [aDecoder decodeObjectForKey:kReservedWords_return];

    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder {
    [aCoder encodeObject:__if forKey:kReservedWords_if];
    [aCoder encodeObject:__return forKey:kReservedWords_return];
}

- (id)copyWithZone:(NSZone *)zone {
    ReservedWords *copy = [[ReservedWords alloc] init];
    if (copy) {
        copy._if = [self._if copyWithZone:zone];
        copy._return = [self._return copyWithZone:zone];
    }

    return copy;
}

@end
