//
//  ReservedWords.swift
//
//  Created on <%= Time.now.strftime("%Y-%m-%d") %>
//  Copyright (c) <%= Time.now.strftime("%Y") %>. All rights reserved.
//  Generated by Kilza https://github.com/Jaspion/Kilza
//

import Foundation

public class ReservedWords: NSObject, NSCoding {
    // Original names
    static let kReservedWords_if: String = "if"
    static let kReservedWords_return: String = "return"

    public var _if: String?
    public var _return: ReturnClass?

    public class func model(obj: AnyObject) -> ReservedWords? {
        var instance: ReservedWords?
        if (obj is String) {
            instance = ReservedWords.init(str: obj as! String)
        } else if (obj is Dictionary<String, AnyObject>) {
            instance = ReservedWords.init(dict: obj as! Dictionary)
        }
        return instance
    }

    public convenience init?(str: String) {
        if let data = str.dataUsingEncoding(NSUTF8StringEncoding) {
            do {
                let object: AnyObject = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments)
                self.init(dict: object as! Dictionary)
            } catch _ as NSError {
                self.init(dict: Dictionary())
            }
        } else {
            self.init(dict: Dictionary())
        }
    }

    public init?(dict: Dictionary<String, AnyObject>) {
        super.init()
        self._if = objectOrNil(forKey: ReservedWords.kReservedWords_if, fromDictionary:dict) as? String
        self._return = ReturnClass.model(dict[ReservedWords.kReservedWords_return]!)
    }

    public func dictionaryRepresentation() -> Dictionary<String, AnyObject> {
        var mutableDict: Dictionary = [String: AnyObject]()
        mutableDict[ReservedWords.kReservedWords_if] = self._if
        if let dic = self._return?.dictionaryRepresentation() {
            mutableDict[ReservedWords.kReservedWords_return] = dic
        } else {
            mutableDict[ReservedWords.kReservedWords_return] = self._return
        }
        return NSDictionary.init(dictionary: mutableDict) as! Dictionary<String, AnyObject>
    }

    public func objectOrNil(forKey key: String, fromDictionary dict: Dictionary<String, AnyObject>) -> AnyObject?
    {
        if let object: AnyObject = dict[key] {
            if !(object is NSNull) {
                return object
            }
        }
        return nil
    }

    required public init(coder aDecoder: NSCoder) {
        self._if = aDecoder.decodeObjectForKey(ReservedWords.kReservedWords_if)! as? String
        self._return = aDecoder.decodeObjectForKey(ReservedWords.kReservedWords_return)! as? ReturnClass
    }

    public func encodeWithCoder(aCoder: NSCoder) {
        aCoder.encodeObject(_if, forKey:ReservedWords.kReservedWords_if)
        aCoder.encodeObject(_return, forKey:ReservedWords.kReservedWords_return)
    }

    override public var description: String {
        get {
            return "\(dictionaryRepresentation())"
        }
    }
}
